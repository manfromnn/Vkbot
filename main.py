import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from datetime import datetime, timedelta
import time
import json
import logging
import sqlite3
import re
import requests
from configparser import ConfigParser
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from threading import Lock

# –ë–ª–æ–∫ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class ReloadableConfig:
    def __init__(self, config_file='config.ini'):
        self.config_file = config_file
        self.config = ConfigParser()
        self.lock = Lock()
        self.last_modified = 0
        self.load_config()
        
        # –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–∞
        self.observer = Observer()
        event_handler = FileSystemEventHandler()
        event_handler.on_modified = lambda e: self.load_config()
        self.observer.schedule(event_handler, path='.', recursive=False)
        self.observer.start()

    def load_config(self):
        with self.lock:
            try:
                new_mtime = os.path.getmtime(self.config_file)
                if new_mtime != self.last_modified:
                    self.config.read(self.config_file)
                    self.last_modified = new_mtime
                    logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")

    def get(self, *args, **kwargs):
        with self.lock:
            return self.config.get(*args, **kwargs)
    
    def getint(self, *args, **kwargs):
        with self.lock:
            return self.config.getint(*args, **kwargs)
    
    def getboolean(self, *args, **kwargs):
        with self.lock:
            return self.config.getboolean(*args, **kwargs)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = ReloadableConfig()

# –ë–ª–æ–∫ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
class Settings:
    def __init__(self):
        # VK
        self.ACCESS_TOKEN = config.get('VK', 'ACCESS_TOKEN')
        self.TARGET_GROUP_ID = config.getint('VK', 'TARGET_GROUP_ID')
        self.REGION_ID = config.getint('VK', 'REGION_ID')
        
        # –ü–æ–∏—Å–∫
        self.SEARCH_GROUP_KEYWORDS = json.loads(config.get('SEARCH', 'GROUP_KEYWORDS'))
        self.POST_KEYWORDS = json.loads(config.get('SEARCH', 'POST_KEYWORDS'))
        self.BLACKLIST_GROUPS = json.loads(config.get('SEARCH', 'BLACKLIST_GROUPS', fallback='[]'))
        
        # –§–∏–ª—å—Ç—Ä—ã
        self.STOP_WORDS = json.loads(config.get('FILTERS', 'STOP_WORDS', fallback='[]'))
        self.SPAM_REGEX = json.loads(config.get('FILTERS', 'SPAM_REGEX', fallback='[]'))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.MAX_GROUPS = config.getint('SETTINGS', 'MAX_GROUPS')
        self.DAYS_AGO = config.getint('SETTINGS', 'DAYS_AGO')
        self.CHECK_INTERVAL = config.getint('SETTINGS', 'CHECK_INTERVAL')
        self.USE_PROXY = config.getboolean('NETWORK', 'USE_PROXY', fallback=False)
        
        # Telegram
        self.TELEGRAM_TOKEN = config.get('TELEGRAM', 'TOKEN', fallback='')
        self.TELEGRAM_CHAT_ID = config.get('TELEGRAM', 'CHAT_ID', fallback='')

settings = Settings()

# –ë–ª–æ–∫ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API —Å –ø—Ä–æ–∫—Å–∏
if settings.USE_PROXY:
    proxy = {
        'https': config.get('NETWORK', 'PROXY_URL')
    }
    session = requests.Session()
    session.proxies = proxy
    vk_session = vk_api.VkApi(token=settings.ACCESS_TOKEN, session=session)
else:
    vk_session = vk_api.VkApi(token=settings.ACCESS_TOKEN)

vk = vk_session.get_api()

# –ë–ª–æ–∫ 4: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏
class Database:
    def __init__(self, db_name='posts.db'):
        self.conn = sqlite3.connect(db_name)
        self._create_tables()
        self.stats = {
            'total_posts': 0,
            'published_posts': 0,
            'errors': 0
        }

    def _create_tables(self):
        with self.conn:
            # –¢–∞–±–ª–∏—Ü–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS posted_posts (
                    post_id TEXT PRIMARY KEY,
                    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS stats (
                    date DATE PRIMARY KEY,
                    total_posts INTEGER DEFAULT 0,
                    published_posts INTEGER DEFAULT 0,
                    errors INTEGER DEFAULT 0
                )
            ''')
            
            # –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS blacklist (
                    group_id INTEGER PRIMARY KEY,
                    reason TEXT
                )
            ''')

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏...
    # –ü–æ–ª–Ω—ã–π –∫–æ–¥ –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö

db = Database()

# –ë–ª–æ–∫ 5: Telegram-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
class TelegramNotifier:
    def __init__(self):
        self.token = settings.TELEGRAM_TOKEN
        self.chat_id = settings.TELEGRAM_CHAT_ID
        self.enabled = bool(self.token and self.chat_id)
        
    def send_message(self, text):
        if not self.enabled:
            return
        
        try:
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                'chat_id': self.chat_id,
                'text': text[:4000],
                'parse_mode': 'HTML'
            }
            requests.post(url, data=payload, timeout=10)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")

tg = TelegramNotifier()

# –ë–ª–æ–∫ 6: –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
class VKBot:
    def __init__(self):
        self.last_check = datetime.now()
        
    def is_spam(self, text):
        text = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤
        if any(word in text for word in settings.STOP_WORDS):
            return True
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º
        for pattern in settings.SPAM_REGEX:
            if re.search(pattern, text, re.IGNORECASE):
                return True
                
        return False

    def get_group_statistics(self):
        # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        return {
            'processed': db.stats['total_posts'],
            'published': db.stats['published_posts'],
            'errors': db.stats['errors']
        }

    def process_comments(self, post):
        if not config.getboolean('SETTINGS', 'PROCESS_COMMENTS', fallback=False):
            return
            
        try:
            comments = vk.wall.getComments(
                owner_id=post['owner_id'],
                post_id=post['id'],
                count=100
            )['items']
            
            for comment in comments:
                if text_contains_keywords(comment['text'], settings.POST_KEYWORDS):
                    self.process_comment(comment)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞...

# –ë–ª–æ–∫ 7: –ó–∞–ø—É—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
def main():
    bot = VKBot()
    while True:
        try:
            start_time = datetime.now()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            bot.run_processing_cycle()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = bot.get_group_statistics()
            report = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª:\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {stats['processed']}\n"
                f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats['published']}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {stats['errors']}"
            )
            tg.send_message(report)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            sleep_time = settings.CHECK_INTERVAL - (datetime.now() - start_time).seconds
            if sleep_time > 0:
                time.sleep(sleep_time)
                
        except KeyboardInterrupt:
            logging.info("–†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            tg.send_message(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            time.sleep(60)

if __name__ == '__main__':
    main()
